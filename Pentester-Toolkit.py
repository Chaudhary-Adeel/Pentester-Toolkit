#!/usr/bin/env python

import requests,re,os,sys,time

try:
	from termcolor import *
except:
	print " -- install termcolor By using: 'sudo easy_install termcolor' -- "
	
def banner():
	os.system('clear')
	cprint('''
    ____             __            __                ______            ____ __ _ __ 
   / __ \___  ____  / /____  _____/ /____  _____    /_  __/___  ____  / / //_/(_) /_
  / /_/ / _ \/ __ \/ __/ _ \/ ___/ __/ _ \/ ___/_____/ / / __ \/ __ \/ / ,<  / / __/
 / ____/  __/ / / / /_/  __(__  ) /_/  __/ /  /_____/ / / /_/ / /_/ / / /| |/ / /_  
/_/    \___/_/ /_/\__/\___/____/\__/\___/_/        /_/  \____/\____/_/_/ |_/_/\__/  
                                                       ''', 'green', attrs=['bold'])

banner()
cprint(' -- UrduSecurity WebApp Header Analysis Tool Kit --', "green", attrs=['bold'])
print colored("+++", "green") * 16
print " -- Blog: " + colored("http://urdusecurity.blogspot.com", "green") + " -- "
print colored("+++", "green") * 16
print " -- Author: " + colored("Muhammad Adeel", "green") + " --"
print colored("+++", "green") * 16
print " -- PlatForm: " + colored("{0}", "green").format(sys.platform) + " -- " 
print colored("+++", "green") * 16
print " -- Scan Started at:" + colored(" {0}", "green").format(time.ctime()) + " -- "
print colored("+++", "green") * 16
print """
[!] Check for Both 'http' & https' For Better Results

[+] 1. Get Server Info
[+] 2. Check For HttpOnly Flag
[+] 3. Check For XFrame-Options
[+] 4. Check For X-XSS-Protection
[+] 5. Check All"""
print colored("+++", "green") * 16

def input():
	global select_mode
	global target_url
	select_mode = raw_input(colored('\n(Select)> ', 'green'))
	target_url = raw_input(colored('(Url)> ', 'green'))
input()

def CheckServer():
	print colored("+++", "green") * 16
	print colored("-- Getting Server Info --", "green")
	print colored("+++", "green") * 16
	s_check = requests.post(target_url)
	regex = '''<meta name="generator" content="(.+?)" />'''
	check_regex = re.findall(regex, s_check.content)
	try:
		if s_check.raw.headers.has_key('server'):
			print "[+] Server Header is Present"
			ser = s_check.raw.getheader('server')
			print "[+] Target is using Following Server: " + colored("{0}", "green").format(ser)
		if s_check.raw.headers.has_key('x-content-encoded-by'):
			script = s_check.raw.getheader('x-content-encoded-by')
			print "[+] Web Based on: " + colored("{0}", "green").format(script)
		if check_regex:
			print "[+] Web Based on:" + colored(" {0}", "green").format(check_regex)
		else:
			print "[-] Unable to Find Web Script"
	except:
		print "-- Exception Catched --"

def HttpOnly():
	print colored("+++", "green") * 16
	print colored("-- Checking for HttpOnly Flag --", "green")
	print colored("+++", "green") * 16
	checkfor = requests.post(target_url)
	var = checkfor.raw.headers.has_key('set-cookie')
	var2 = 'HttpOnly'
	if var:
		print "[+] Set-Cookie Found..\n[+] Trying for HttpOnly..."
		try:
			if var2 in checkfor.raw.headers.viewvalues():
				print "[+] HttpOnly Flg is:" + colored(" Present", "green")
			else:
				print "[-] HttpOnly Flag is:" + colored(" Not Present", "green")
		except:
			print "-- Exception catched --"
			pass
	else:
		print "[-] Set-Cookie Not Found."	
	
def XframeOptions():
	print colored("+++", "green") * 16
	print colored("-- Checking For X-Frame-Options --", "green")
	print colored("+++", "green") * 16
	checkforxframe = requests.post(target_url)
	if checkforxframe.raw.headers.has_key('x-frame-options'):
		print "[+] X-Frame-Options is Present.\n[+] Checking For Methods.."
		list_Method = ['DENY', 'SAMEORIGIN', 'ALLOW-FROM', 'Deny', 'SameOrigin', 'Allow-From', 'deny', 'sameorigin', 'allow-from']
		for x in range(0, 9):
			if list_Method[x] in checkforxframe.raw.getheader('x-frame-options'):
				print "[+] Following XFrame Option Found:" + colored(" {0}", "green").format(list_Method[x])
			else:
				print "[-] Not Found:" + colored(" {0}", "green").format(list_Method[x])
	else:
		print "[-] X-Frame-Options Not Found."

def XxssPro():
	print colored("+++", "green") * 16
	print colored(" -- Checking for X-XSS-Protection -- ", "green")
	print colored("+++", "green") * 16
	checkxsspro = requests.post(target_url)
	try:
		if checkxsspro.raw.headers.has_key('x-xss-protection'):
			print "[+] X-XSS Protection is Present.\n[+] Checking Value.."
			x_value = ['0','1','1; mode=block']
			if x_value[0] in checkxsspro.raw.getheader('x-xss-protection'):
				print "[+] X-XSS-Protection value is: " + colored("{0}", "green").format(x_value[0])
			elif x_value[2] in checkxsspro.raw.getheader('x-xss-protection'):
				print "[+] X-XSS-Protection value is: " + colored("{0}", "green").format(x_value[2])
			else:
				print "[+] X-XSS-Protection value is: " + colored("{0}", "green").format(x_value[1])
		else:
			print "[-] X-XSS-Protection Header Not Found."
	except:
		print "-- Exception Cacthed --"

def Attack():
	if select_mode == '1':
		try:
			CheckServer()
			input()
		except:
			print "-- Exception Catched --\n"
			input()
	elif select_mode == '2':
		try:
			HttpOnly()
			input()
		except:
			print "-- Exception Catched --"
			input()
	elif select_mode == '3':
		try:
			XframeOptions()
			input()
		except:
			print "-- Exception Catched --"
			input()
	elif select_mode == '4':
		try:
			XxssPro()
			input()
		except:
			print "-- Exception Catched --"
			input()
	elif select_mode == '5':
		try:
			CheckServer()
			HttpOnly()
			XframeOptions()
			XxssPro()
			input()
		except:
			print "-- Exception Catched --"
			input()
	else:
		print "[-] Invalid Choice!\n"
		input()
 
while select_mode > 0:
	Attack()

def main():
	if __name__ == '__main__':
		main()
